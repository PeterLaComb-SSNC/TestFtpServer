# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Release
on:
  workflow_dispatch: # Allow running the workflow manually from the GitHub UI
  push:
    branches:
      - 'main'       # Run the workflow when pushing to the main branch
  pull_request:
    branches:
      - '*'          # Run the workflow for all pull requests
  release:
    types:
      - published    # Run the workflow when a new GitHub release is published
env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  NuGetDirectory: ${{github.workspace}}/nuget
defaults:
  run:
    shell: pwsh
jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Determine Version
      uses: wemogy/get-release-version-action@v4.3.2
      id: get-release-version
      with:
        prefix: "v"
        suffix: "NONE"
        reference-version-suffix: "NONE"
        bumping-suffix: "hotfix"
        only-bump-suffix: "false"
        create-tag: "true"
        git-username: "PeterLaComb-SSNC"
        git-email: "peter.lacomb@ssncinc.com"
        mode: "semantic"

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Run tests
      run: dotnet test --configuration Release

    - name: Aspire - Build
      run: |
        dotnet build --configuration Release --no-incremental -p:BuildWhat=Aspire -p:Version="${{ steps.get-release-version.outputs.version }}" -p:InformationalVersion="${{ steps.get-release-version.outputs.version }}"

    - name: Aspire - Package
      run: |
        dotnet pack --no-build --no-restore --configuration Release --output ${{ env.NuGetDirectory }} -p:BuildWhat=Aspire -p:Version="${{ steps.get-release-version.outputs.version }}" -p:InformationalVersion="${{ steps.get-release-version.outputs.version }}"

    - name: Log in to Docker Hub
      uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
      with:
        images: peterlacombssnc/sftpgousers

    - name: Build and push Docker image
      id: push
      uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
      with:
        context: ./TestFtpServer.SftpGo.Users
        file: ./TestFtpServer.SftpGo.Users/Dockerfile
        push: true
        tags: |
          - ${{ steps.get-release-version.outputs.version }}
          - latest
#          - peterlacombssnc/sftpgousers:${{ steps.get-release-version.outputs.version }}
#          - peterlacombssnc/sftpgousers:latest
        labels: ${{ steps.meta.outputs.labels }}

    # - name: Generate artifact attestation
    #   uses: actions/attest-build-provenance@v2
    #   with:
    #     subject-name: index.docker.io/peterlacombssnc/sftpgousers
    #     subject-digest: ${{ steps.push.outputs.digest }}
    #     push-to-registry: true

    - name: Save Artifact
      uses: actions/upload-artifact@v4
      with:
        name: nuget
        if-no-files-found: error
        retention-days: 7
        path: ${{ env.NuGetDirectory }}/*.nupkg

  validate_nuget:
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:

      # Install the .NET SDK indicated in the global.json file
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # Download the NuGet package created in the previous job
      - name: Download Artificat
        uses: actions/download-artifact@v4
        with:
          name: nuget
          path: ${{ env.NuGetDirectory }}

      - name: Install nuget validator
        run: dotnet tool update Meziantou.Framework.NuGetPackageValidation.Tool --global

      # Validate metadata and content of the NuGet package
      # https://www.nuget.org/packages/Meziantou.Framework.NuGetPackageValidation.Tool#readme-body-tab
      # If some rules are not applicable, you can disable them
      # using the --excluded-rules or --excluded-rule-ids option
      - name: Validate package
        run: meziantou.validate-nuget-package (Get-ChildItem "${{ env.NuGetDirectory }}/*.nupkg") --excluded-rule-ids "32,52,119"

  deploy:
    # Publish only when creating a GitHub Release
    # https://docs.github.com/en/repositories/releasing-projects-on-github/managing-releases-in-a-repository
    # You can update this logic if you want to manage releases differently
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: [ validate_nuget ]
    steps:
      # Download the NuGet package created in the previous job
      - uses: actions/download-artifact@v4
        with:
          name: nuget
          path: ${{ env.NuGetDirectory }}

      # Install the .NET SDK indicated in the global.json file
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # Publish all NuGet packages to NuGet.org
      # Use --skip-duplicate to prevent errors if a package with the same version already exists.
      # If you retry a failed workflow, already published packages will be skipped without error.
      - name: Publish NuGet package
        run: |
          foreach($file in (Get-ChildItem "${{ env.NuGetDirectory }}" -Recurse -Include *.nupkg)) {
            dotnet nuget push $file --skip-duplicate --source "https://nuget.pkg.github.com/PeterLaComb-SSNC/index.json" -k ${{ secrets.NUGET_TOKEN }}
          }
